
"""This module contains a Parsimonious cardiac cell model

The module was autogenerated from a gotran ode file
"""
from __future__ import division
from collections import OrderedDict
import ufl

from cbcbeat.dolfinimport import *
from cbcbeat.cellmodels import CardiacCellModel

class Parsimonious(CardiacCellModel):
    def __init__(self, params=None, init_conditions=None):
        """
        Create cardiac cell model

        *Arguments*
         params (dict, :py:class:`dolfin.Mesh`, optional)
           optional model parameters
         init_conditions (dict, :py:class:`dolfin.Mesh`, optional)
           optional initial conditions
        """
        CardiacCellModel.__init__(self, params, init_conditions)

    @staticmethod
    def default_parameters():
        "Set-up and return default parameters."
        params = OrderedDict([("amp", -80.0),
                              ("duration", 0.5),
                              ("stimStart", 50.0),
                              ("E_Na", 65),
                              ("E_h", -74.7),
                              ("E_m", -41),
                              ("delta_h", 0.799163),
                              ("g_Na", 11),
                              ("k_h", 4.4),
                              ("k_m", 4),
                              ("tau_h0", 6.80738),
                              ("tau_m", 0.12),
                              ("E_K", -83),
                              ("g_K", 0.3),
                              ("k_r", 21.28)])
        return params

    @staticmethod
    def default_initial_conditions():
        "Set-up and return default initial conditions."
        ic = OrderedDict([("V", -85.423),
                          ("m", 0.00165),
                          ("h", 0.749)])
        return ic

    def _I(self, v, s, time):
        """
        Original gotran transmembrane current dV/dt
        """
        time = time if time else Constant(0.0)

        # Assign states
        V = v
        assert(len(s) == 2)
        m, h = s

        # Assign parameters
        amp = self._parameters["amp"]
        duration = self._parameters["duration"]
        stimStart = self._parameters["stimStart"]
        E_Na = self._parameters["E_Na"]
        g_Na = self._parameters["g_Na"]
        E_K = self._parameters["E_K"]
        g_K = self._parameters["g_K"]
        k_r = self._parameters["k_r"]

        # Init return args
        current = [ufl.zero()]*1

        # Expressions for the Fast sodium current component
        i_Na = g_Na*ufl.elem_pow(m, 3.0)*(-E_Na + V)*h

        # Expressions for the Potassium current component
        i_K = g_K*(-E_K + V)*ufl.exp((E_K - V)/k_r)

        # Expressions for the Membrane component
        i_stim = ufl.conditional(ufl.And(ufl.gt(time, stimStart),\
            ufl.le(time, duration + stimStart)), amp, 0)
        current[0] = -i_K - i_Na - i_stim

        # Return results
        return current[0]

    def I(self, v, s, time=None):
        """
        Transmembrane current

           I = -dV/dt

        """
        return -self._I(v, s, time)

    def F(self, v, s, time=None):
        """
        Right hand side for ODE system
        """
        time = time if time else Constant(0.0)

        # Assign states
        V = v
        assert(len(s) == 2)
        m, h = s

        # Assign parameters
        E_h = self._parameters["E_h"]
        E_m = self._parameters["E_m"]
        delta_h = self._parameters["delta_h"]
        k_h = self._parameters["k_h"]
        k_m = self._parameters["k_m"]
        tau_h0 = self._parameters["tau_h0"]
        tau_m = self._parameters["tau_m"]

        # Init return args
        F_expressions = [ufl.zero()]*2

        # Expressions for the m gate component
        m_inf = 1.0/(1.0 + ufl.exp((E_m - V)/k_m))
        F_expressions[0] = (-m + m_inf)/tau_m

        # Expressions for the h gate component
        h_inf = 1.0/(1.0 + ufl.exp((-E_h + V)/k_h))
        tau_h = 2*tau_h0*ufl.exp(delta_h*(-E_h + V)/k_h)/(1 + ufl.exp((-E_h +\
            V)/k_h))
        F_expressions[1] = (-h + h_inf)/tau_h

        # Return results
        return dolfin.as_vector(F_expressions)

    def num_states(self):
        return 2

    def __str__(self):
        return 'Parsimonious cardiac cell model'
